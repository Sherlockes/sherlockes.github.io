<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on Sherblog</title>
    <link>/categories/hugo/</link>
    <description>Contenido reciente in Hugo en Sherblog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es</language>
    <lastBuildDate>Tue, 04 Sep 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/categories/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Publicar desde iaWriter</title>
      <link>/publicar-desde-iawriter/</link>
      <pubDate>Tue, 04 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/publicar-desde-iawriter/</guid>
      <description>

&lt;h3 id=&#34;publicar-solo-con-el-editor-de-texto&#34;&gt;Publicar solo con el editor de texto&lt;/h3&gt;

&lt;p&gt;Hace un tiempo que estoy intentando escribir en Markdown y para WordPress he estado utilizando el Plugin &lt;a href=&#34;https://wordpress.org/plugins/wp-markdown/&#34;&gt;Wp-MarkDown&lt;/a&gt; que me ha permitido realizar la maquetación del post directamente en Markdown. Una vez que he dejado atrás WordPress en favor de Hugo uno de mis objetivos de los últimos meses ha sido poder publicar en el blog simplemente usando un editor de texto.&lt;/p&gt;

&lt;p&gt;Pues bien, no sin algo de esfuerzo, al final lo he conseguido. Gracias a Hugo cómo CMS este post que ahora estoy escribiendo lo puedo publicar en mi blog de una forma rápida y sencilla en Markdown directamente desde la aplicación &lt;a href=&#34;https://ia.net/writer&#34;&gt;iaWritter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Las etapas del proceso son las siguientes.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parto de un archivo de texto con extensión *.md que renombro con la estructura &amp;ldquo;fecha_nombre_archivo.md&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Escribo el contenido del Post&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hasta aquí todo el proceso que he de realizar de forma manual. El resto se realiza de forma automática según la siguiente secuencia.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Iawriter guarda el archivo de texto en mi unidad de Google Drive en una carpeta específica para los post de la web.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Gracias a rclone la Raspberry es capaz de sincronizar tanto la carpeta &amp;ldquo;content&amp;rdquo; como la &amp;ldquo;static&amp;rdquo; con la nube de Google Drive mediante un proceso en crontab que se ejecuta cada hora&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Para crear el proceso que se ejecute cada hora  se utiliza el comando &lt;code&gt;crontab -e&lt;/code&gt; añadiendo al final la línea &amp;ldquo;0 * * * * /home/pi/sherblog/publicar.sh&amp;rdquo; donde &amp;ldquo;publicar.sh&amp;rdquo; es el script ejecutable que realiza todas las operaciones.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;La misma secuencia de comandos busca en la carpeta &amp;ldquo;post&amp;rdquo; algún archivo sin cabecera para incluirle una genérica que luego será fácil de editar.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Antes de colocar la cabecera, el script comprueba que el archivo no se ha modificado en la última hora para de esta forma &amp;ldquo;garantizar&amp;rdquo; que no se está trabajando en el y no crear problemas de sincronización.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Con los cambios efectuados en los archivos sin cabecera se realiza la sincronización inversa hacia la nube de Google.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tras sincronizar la carpeta, el script construye toda la web estática a partir de los post y archivos de configuración.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Resulta interesante conocer que para hacer referencia al comando &amp;ldquo;hugo&amp;rdquo; hay que usar en el script la ruta completa que en mi caso quedará &amp;ldquo;/usr/local/bin/hugo&amp;rdquo;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;Con la web regenerada se suben los cambios a mi cuenta de github donde tengo publicada la web de forma completamente gratuita.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
# -*- ENCODING: UTF-8 -*-

#Sincroniza el contenido de la nube de Google Drive con las carpetas locales
rclone sync -v GoogleDrive:/Sherblog/content/ /home/pi/sherblog/content/
rclone sync -v GoogleDrive:/Sherblog/static/ /home/pi/sherblog/static/

#Cambio al directorio de contenidos
cd ~/sherblog/content/post

#Busca archivos sin cabecera para añadirle una genérica
grep -r -L &amp;quot;\-\-\-&amp;quot; * |
while read fname
do
  #Minutos que han de pasar desde la ultima modificación para encabezado
  minmin=30

  #Calculo de los minutos pasados desde la ultima modificacion
  umodsg=$(date +%s -r &amp;quot;$fname&amp;quot;)
  ahorasg=$(date +%s)
  minpasados=$(((ahorasg - umodsg)/60))
  echo Han pasado $minpasados de los $minmin minutos desde la modificación de &amp;quot;$fname&amp;quot;

  #Inserta la cabecera si han pasado más de 65 minutos
  if [ $minpasados -gt $minmin ]; then
    echo Colocando la cabecera a &amp;quot;$fname&amp;quot;
    cat cabecera.md &amp;quot;$fname&amp;quot; &amp;gt; temp &amp;amp;&amp;amp; mv temp &amp;quot;$fname&amp;quot;
  fi
done

#Sincroniza los archivos de la nube con los modificados en local
rclone sync -v /home/pi/sherblog/content/ GoogleDrive:/Sherblog/content/

#Genera la web estática en Hugo
cd ~/sherblog
/usr/local/bin/hugo

#Sube los cambios generados en la web a GitHub
cd ~/sherblog/git/sherlockes.github.io
git add --all
git commit -m &amp;quot;Update&amp;quot;
git push -u origin master

exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ya está. La web actualizada sin usar nada más que iawriter. Ahora resta idear un método sencillo para subir las imágenes, quizás IFTTT sea una buena opción, pero esto para otro día&amp;hellip;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A fecha de hoy (Octubre de 2010) el sistema funciona a las mil maravillas en Android pero IAWriter en IOS da algún problema a la hora de guardar los archivos en Google Drive, espero se solvente con alguna actualización.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Insertar en Twitter enlaces a Hugo con imagen</title>
      <link>/insertar-en-twitter-enlaces-a-hugo-con-imagen/</link>
      <pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/insertar-en-twitter-enlaces-a-hugo-con-imagen/</guid>
      <description>

&lt;h3 id=&#34;el-problema&#34;&gt;El problema&lt;/h3&gt;

&lt;p&gt;Ya tenemos nuestra web en &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; y resulta que cuando queremos compartir un enlace al mismo en &lt;a href=&#34;https://twitter.com&#34;&gt;Twitter&lt;/a&gt; este aparece como un miserable hipervínculo, ni imagen, ni resumen, ni título, ni na¡¡¡.  No se si el problema es común para todos los temas u ocurre simplemente con el que yo he utilizado.&lt;/p&gt;

&lt;p&gt;No tardo mucho en encontrar información para darme cuenta de que todo pasa por el uso de metadatos por parte de &lt;a href=&#34;https://twitter.com&#34;&gt;Twitter&lt;/a&gt; para generar las tarjetas (Cards) tal y como se comenta en su sección de &lt;a href=&#34;https://developer.twitter.com/en/docs/tweets/optimize-with-cards/guides/getting-started.html&#34;&gt;desarrolladores&lt;/a&gt; donde puedes invertir varias horas para documentarte o seguir leyendo durante unos minutos para solucionar tu problema.&lt;/p&gt;

&lt;p&gt;Es decir, &lt;a href=&#34;https://twitter.com&#34;&gt;Twitter&lt;/a&gt; necesita unos metadatos que &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; no está enviando.&lt;/p&gt;

&lt;h3 id=&#34;la-solución&#34;&gt;La solución&lt;/h3&gt;

&lt;p&gt;En todos los encabezados de los artículos tengo, entre otros, insertados los siguiente campos&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;title: &amp;quot;Enlaces con imagen en Twitter a Hugo&amp;quot;
description: &amp;quot;Te interesa leer si los links que compartes o comparten en Twitter de tu web en Hugo Salen sin imagen&amp;quot;
thumbnail: &amp;quot;images/20180712_wordpress_hugo.jpg&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pues bien, el reto pasa por reaprovechar estos campos para generar los metadatos que &lt;a href=&#34;https://twitter.com&#34;&gt;Twitter&lt;/a&gt; está buscando para generar su tarjeta de enlace.  Hay varias opciones, pero la más práctica que he encontrado es editar el archivo &amp;ldquo;header.html&amp;rdquo; dentro de la carpeta &amp;ldquo;layouts/partials&amp;rdquo; e incluir en el &amp;ldquo;head&amp;rdquo; a continuación de los metas de &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; estas líneas:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;meta name=&amp;quot;twitter:card&amp;quot; content=&amp;quot;{{ .Params.description }}&amp;quot; /&amp;gt;
&amp;lt;meta name=&amp;quot;twitter:title&amp;quot; content=&amp;quot;{{ .Params.title }}&amp;quot; /&amp;gt;
{{ if (.Params.thumbnail) }}&amp;lt;meta name=&amp;quot;twitter:image&amp;quot; content=&amp;quot;http://sherblog.pro/{{ .Params.thumbnail }}&amp;quot; /&amp;gt;
{{else}}&amp;lt;meta name=&amp;quot;twitter:image&amp;quot; content=&amp;quot;http://sherblog.pro/images/logo.png&amp;quot; /&amp;gt;
{{end}}
&amp;lt;meta name=&amp;quot;twitter:creator&amp;quot; content=&amp;quot;@sherblogpro&amp;quot;&amp;gt;
&amp;lt;meta name=&amp;quot;twitter:site&amp;quot; content=&amp;quot;sherblog.pro&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bastante sencillo, cada metadato corresponde a un parámetro de nuestro archivo con una particularidad para el caso de las imágenes y es que hace distinción para el caso en que no encuentre el parámetro &amp;ldquo;thumbnail&amp;rdquo; que utilice en su lugar una imagen fija.&lt;/p&gt;

&lt;h3 id=&#34;comprobando-la-solución&#34;&gt;Comprobando la solución&lt;/h3&gt;

&lt;p&gt;Podrías dedicarte a enviar y borrar tweets para comprobar que funciona la solución que hemos adoptado pero &lt;a href=&#34;https://twitter.com&#34;&gt;Twitter&lt;/a&gt; nos proporciona una herramienta más sencilla mediante su &lt;a href=&#34;https://cards-dev.twitter.com/validator&#34;&gt;validador de tarjetas&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/20180726_hugo_twitter_card_01.jpg&#34; alt=&#34;CardsGen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Esta es una web en la que pegas el enlace que quieres comprobar y te muestra la tarjeta generada y los posibles problemas que encuentra en su generación.  Tras las modificaciones en el &amp;ldquo;header.html&amp;rdquo; la tarjeta generada aparece así.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/20180726_hugo_twitter_card_02.jpg&#34; alt=&#34;CardsGen&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>